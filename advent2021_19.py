inp = """--- scanner 0 ---
841,866,478
-437,-775,-647
119,-8,72
631,448,-357
378,-633,749
752,-316,-718
-408,-736,-558
368,-621,627
-675,-734,554
-21,33,-80
-361,457,-746
653,-355,-631
-667,777,772
-659,-734,653
745,-489,-656
373,-642,759
-360,579,-799
767,476,-436
-346,498,-726
688,388,-535
-643,-825,592
-497,-772,-502
769,860,408
-756,714,660
797,828,435
-780,792,801

--- scanner 1 ---
124,-61,85
-802,710,-815
-535,-502,487
453,419,-333
778,-817,586
-811,-899,-870
-418,-530,391
-724,716,-858
-818,-918,-808
-655,-501,408
450,595,-368
-24,-126,-33
643,683,864
-792,-877,-659
853,-557,-587
749,-689,569
790,-548,-362
931,-503,-430
886,-785,530
-417,347,562
-435,285,587
541,711,782
551,541,-313
-475,258,484
-804,804,-864
625,832,829

--- scanner 2 ---
-529,-413,571
453,-450,517
-65,28,-52
843,625,384
-406,-479,503
811,-775,-557
892,-758,-702
70,-83,59
888,-660,-570
816,639,553
-626,635,-736
-835,-394,-412
-690,449,585
-535,375,569
-512,632,-683
-455,-386,616
904,618,490
856,340,-436
570,-401,439
-807,-332,-299
-793,-404,-273
445,-411,550
860,300,-592
-624,501,594
912,346,-451
-695,634,-688

--- scanner 3 ---
-832,383,504
-424,-716,-425
391,338,-430
-762,-583,599
364,-449,-307
-784,-591,543
521,243,351
-834,423,569
-501,-748,-479
-849,478,341
462,296,-448
458,-451,-356
452,-529,-313
753,-646,895
-373,225,-484
-395,381,-429
584,278,440
665,-550,804
568,340,-371
-46,-187,-73
-640,-715,-422
754,-628,864
74,-95,68
620,256,519
-759,-492,572
-416,337,-506

--- scanner 4 ---
-526,-486,-764
-557,-506,685
-4,138,-63
747,428,763
422,-425,551
-646,822,481
671,485,686
751,510,843
432,-706,-400
365,-393,580
516,-753,-279
-543,-509,655
-544,-511,-826
-161,-28,109
-647,825,697
534,-788,-428
-542,-392,576
-833,934,-395
442,389,-570
-913,940,-307
-911,891,-401
402,-266,531
341,444,-516
-614,768,558
344,409,-692
-584,-408,-853

--- scanner 5 ---
-612,-752,659
-569,313,-659
837,575,-546
970,-856,665
-684,749,411
-647,224,-601
734,-789,-406
-740,-564,-658
-732,701,389
-641,-733,575
684,499,930
96,-94,151
940,-930,661
-644,-536,-541
810,-929,-336
684,-995,-409
799,434,-521
-723,-535,-421
-544,251,-641
700,468,751
917,-969,673
659,430,727
157,-169,-18
812,497,-511
-645,-763,577
-713,733,490

--- scanner 6 ---
685,-799,-730
-856,764,721
767,-795,-650
710,-719,-573
-651,731,-706
806,-490,683
370,599,-584
-635,-366,-510
-709,-358,-561
304,863,514
-624,822,-703
-59,-50,141
373,598,-368
751,-389,629
-595,723,-728
-916,686,810
-947,668,809
255,865,420
-739,-439,-577
427,566,-445
-597,-748,926
-561,-768,945
16,68,30
786,-392,805
-446,-866,950
261,785,508

--- scanner 7 ---
-773,510,756
-904,665,-683
-949,599,-518
599,799,629
-122,-111,-95
560,662,533
-686,-754,805
-839,-617,-765
347,454,-867
542,-522,-441
-863,658,722
738,-505,374
-801,-642,-624
-32,49,-190
-834,542,-642
-814,-652,-687
-873,692,746
300,538,-988
-736,-757,599
265,556,-839
-812,-827,739
543,691,661
642,-622,346
567,-504,-503
721,-742,345
645,-562,-414

--- scanner 8 ---
591,507,446
-24,-53,76
291,-839,-788
720,595,-724
-931,685,775
-936,800,873
717,622,-815
253,-674,-878
575,537,365
756,-701,477
-774,-617,-378
-795,299,-661
774,-704,387
-916,-786,713
730,-707,333
524,611,373
-796,330,-679
-750,-620,-626
310,-692,-770
-802,-553,-457
-912,649,755
-139,-3,-69
-924,-814,853
742,651,-716
-850,-876,753
-707,390,-757

--- scanner 9 ---
-663,409,-813
-953,-659,410
-679,-681,-393
-172,-111,-37
711,-696,501
317,320,-547
430,380,-475
-654,-773,-527
-592,-780,-354
692,-496,-715
647,-611,-738
-511,332,541
-752,380,-774
694,591,706
574,-578,-619
644,488,757
-584,318,460
731,456,700
-808,469,-810
684,-722,342
-564,333,419
594,-664,467
-19,-61,110
362,533,-510
-874,-795,438
-775,-716,350

--- scanner 10 ---
148,54,70
436,520,-758
-546,484,939
483,-506,-708
562,766,589
-710,-455,-728
516,-426,-674
-710,-406,-529
-630,436,-728
808,-512,862
-481,-592,642
-579,-572,604
-711,545,-658
53,-59,-30
397,-457,-576
-825,-416,-690
-743,553,-734
609,564,-714
849,-492,847
-562,477,880
568,803,724
500,584,-616
-372,-516,616
-449,523,881
511,716,692
727,-439,848

--- scanner 11 ---
-578,-588,-612
-592,764,604
675,-691,-838
-696,-506,-516
650,-783,-704
741,541,452
-768,-510,515
528,-859,660
-321,310,-684
748,370,-457
780,637,315
481,-980,576
-682,730,456
804,459,-421
588,-790,-877
724,669,423
-723,-675,449
446,-831,558
-692,754,422
-434,370,-756
659,399,-418
-366,523,-721
95,-125,-32
-651,-621,-493
-653,-634,572

--- scanner 12 ---
467,-550,715
392,226,328
401,-618,592
-758,-950,-812
-513,-641,497
-452,524,-735
-484,426,-811
441,-799,-797
-20,-61,-47
320,252,314
-775,-959,-765
374,-663,666
455,296,-580
322,-860,-796
471,320,-467
-387,-616,586
-718,-886,-874
382,365,286
462,234,-634
-461,-632,431
-644,636,609
-647,689,495
369,-914,-703
-646,641,426
-436,541,-878

--- scanner 13 ---
899,-482,499
-819,-499,-793
881,406,377
839,388,306
-720,-501,-825
921,-561,535
162,-94,42
-510,808,-818
840,464,-501
-783,-387,-816
754,-611,-919
-587,782,-774
796,387,-480
952,442,-458
-457,359,741
-259,-482,738
-543,505,803
934,-393,436
794,-546,-917
-13,24,-8
-663,739,-878
-481,575,711
54,-112,-152
-408,-501,824
837,329,483
699,-383,-934
-374,-520,779

--- scanner 14 ---
-807,418,-860
-566,-459,811
489,-805,-464
-517,853,594
-147,40,75
-855,422,-859
489,-749,-657
694,809,-457
-792,470,-862
-613,-334,-398
461,-515,729
449,816,639
588,759,672
-635,-421,-365
-541,-417,902
-517,-443,-422
716,754,-301
665,813,640
-658,-447,847
-632,822,686
673,732,-413
491,-518,743
552,-832,-670
-536,819,802
570,-401,744

--- scanner 15 ---
-664,866,-690
571,581,638
699,-911,536
15,-110,108
-367,609,572
171,39,62
466,-885,-546
-624,746,-657
443,-846,-534
573,-845,463
584,518,648
-514,880,-620
649,-705,533
-414,560,573
-421,828,592
-340,-747,623
413,-772,-538
724,514,-600
546,659,673
-320,-542,642
699,583,-803
-535,-366,-603
-490,-544,-673
-460,-461,-715
683,552,-624
-280,-694,649

--- scanner 16 ---
657,-803,337
735,-887,433
-701,277,478
-729,373,595
-674,-701,-793
637,454,368
614,-719,-462
-414,472,-718
461,-695,-421
624,616,457
-730,294,715
-728,-544,-871
-313,-922,878
-354,-773,852
585,-781,-379
-683,-476,-730
-332,-984,871
98,-83,93
647,728,353
-446,416,-826
747,-699,395
763,526,-566
882,441,-647
-29,1,-75
692,391,-653
-542,455,-689

--- scanner 17 ---
560,-817,-789
464,-716,248
-719,-913,-731
412,709,-910
441,694,-797
-706,397,366
-692,-462,337
41,-72,-37
735,783,711
-640,526,-488
-624,681,-562
778,745,667
-35,43,-161
-615,615,-614
805,777,639
-825,-852,-738
621,-908,-773
454,-725,243
586,-704,238
-770,-579,288
659,-817,-805
-638,520,300
-659,-454,298
-656,-825,-752
553,631,-886
-593,446,273

--- scanner 18 ---
640,490,-580
-722,824,-411
911,-424,472
-594,-399,-587
-678,718,-334
418,463,477
533,422,515
860,-462,515
9,131,118
702,398,-510
-443,-415,-548
616,460,-364
-680,895,-393
-554,-611,744
489,-548,-658
420,-443,-619
-421,-631,841
-483,-393,-690
123,54,-22
-461,-711,785
-762,666,556
470,-384,-606
-775,765,388
827,-471,439
-740,702,477
567,377,496

--- scanner 19 ---
830,819,436
-656,414,775
-449,739,-509
-550,-653,-557
485,-697,-452
432,-640,788
492,-487,857
-568,-702,411
809,863,513
-434,657,-404
852,975,491
391,777,-562
-671,416,827
393,817,-497
536,-564,831
-734,-612,380
8,147,42
494,-760,-338
517,-796,-450
-618,-602,320
-688,-546,-547
-668,-529,-519
-719,417,823
-395,642,-505
376,722,-334

--- scanner 20 ---
-879,448,-699
-690,-357,326
302,341,795
-411,-288,-509
595,-312,-628
346,-755,492
-365,-340,-650
326,459,644
314,361,-819
710,-389,-615
388,461,-881
-860,566,-664
49,-61,-63
-683,-296,432
307,439,680
-130,16,56
385,-747,459
693,-308,-760
322,501,-791
-704,-384,495
-405,-344,-494
336,-630,381
-438,541,423
-874,524,-621
-455,612,565
-538,504,484

--- scanner 21 ---
-83,1,-130
-454,-473,417
-456,639,684
579,-740,-933
754,457,-696
-365,677,652
653,402,-642
-557,834,-369
318,-441,684
455,-480,588
-49,140,61
-701,-571,-736
-456,738,668
414,451,447
-418,-417,506
663,-693,-812
-415,-562,446
-835,-546,-644
751,422,-520
351,676,456
426,-497,716
561,-775,-784
-548,844,-364
273,519,402
-569,712,-359
-874,-633,-743

--- scanner 22 ---
-658,-705,-572
723,-800,-896
-500,366,465
-521,592,-679
911,230,-446
17,-169,-24
411,612,524
748,-818,-834
494,599,587
-507,438,503
892,331,-414
-633,-670,-650
438,406,587
-466,-396,478
-445,-451,425
842,-802,506
142,0,-4
728,-787,615
725,-801,585
-620,-680,-713
863,252,-398
-344,-402,554
-429,400,476
826,-760,-923
-480,568,-717
-505,771,-648

--- scanner 23 ---
444,347,940
524,435,934
-599,-554,-823
-345,551,876
-301,445,799
800,-645,-506
-318,384,-342
710,-657,825
-230,-390,763
-239,368,-371
31,-5,-13
-586,-617,-740
743,-518,768
773,893,-408
813,866,-511
-393,-617,-796
446,441,891
-343,374,817
831,804,-486
-386,-412,818
-217,416,-323
711,-441,822
-342,-433,741
815,-536,-392
814,-615,-509

--- scanner 24 ---
523,622,-320
426,669,402
-278,-855,-461
-367,525,855
82,34,89
718,-489,-676
521,799,-379
-252,-896,-312
-445,436,915
439,570,570
461,606,491
-789,-566,438
-259,-877,-250
647,-707,758
-684,-563,556
479,728,-397
-268,732,-305
780,-727,855
-266,826,-256
758,-511,-534
-744,-533,409
-463,437,946
607,-495,-573
-346,738,-262
740,-807,799

--- scanner 25 ---
796,556,581
-455,678,367
-522,814,437
65,58,-142
766,-346,-544
759,-556,765
-845,697,-942
884,557,641
-862,-523,462
-797,-807,-525
757,-283,-430
819,-403,696
-883,-658,-544
-387,850,411
-837,657,-737
715,-479,739
-70,155,-29
-800,-609,316
-838,-692,-563
794,869,-913
-796,809,-841
725,486,656
597,847,-929
-770,-585,532
734,-247,-542
803,867,-883

--- scanner 26 ---
14,-88,-49
-725,-560,-817
777,692,602
-581,-731,770
-551,233,470
422,-684,844
774,495,-514
-466,-787,868
-555,-506,-795
849,-745,-850
778,465,-516
-601,439,467
118,-164,78
745,476,-598
873,664,719
534,-661,740
821,-692,-897
-677,299,397
-413,-718,795
696,-674,829
-784,259,-612
889,-718,-809
-669,-599,-870
856,693,482
-807,298,-600
-837,372,-604

--- scanner 27 ---
-426,769,729
841,587,742
-364,-756,731
822,552,624
-474,446,-481
836,509,666
476,629,-789
354,758,-765
-360,679,689
-480,-437,-703
-345,-792,751
519,-796,-464
417,-677,578
400,-535,649
-481,-406,-685
522,-914,-359
-57,-172,26
500,-596,686
489,-943,-404
-352,707,829
-340,-907,849
-526,513,-650
-569,-497,-781
-502,510,-402
419,605,-748

--- scanner 28 ---
-907,-710,523
800,620,-631
-955,-749,-451
-175,-105,-16
542,-449,482
-45,47,121
461,-813,-346
758,637,-711
-882,-681,424
631,-389,560
-700,437,-426
-456,780,451
-475,633,469
630,-358,578
-418,615,361
-885,-654,515
398,-902,-311
497,-734,-324
609,558,861
637,494,782
-915,457,-461
796,618,-630
-957,-684,-491
-803,493,-545
-972,-912,-546
585,561,613

--- scanner 29 ---
605,-795,-500
463,-848,-520
-38,-105,56
541,-841,363
588,666,-512
-752,569,-552
395,778,663
596,676,-571
-693,531,-666
454,809,632
-785,-661,-307
582,-913,421
389,-780,-487
-723,584,536
-618,532,-539
-740,-506,444
357,871,698
-524,-633,-314
-614,564,438
-707,-426,478
-623,-681,-414
429,637,-546
-787,520,394
-826,-457,576
43,77,-41
550,-703,416

--- scanner 30 ---
693,-800,795
-634,573,590
-605,414,556
387,565,-766
-500,-633,563
-504,890,-770
580,-577,-686
-759,-758,-612
523,-442,-698
99,112,-125
-644,581,531
-714,-767,-573
713,-638,688
-587,-733,-542
-537,-767,550
665,-539,788
-433,855,-589
587,-569,-706
880,448,582
-33,-35,-153
-537,739,-661
-499,-708,436
827,590,602
550,658,-740
459,643,-811
812,374,615

--- scanner 31 ---
-449,-739,803
559,521,-705
-856,583,826
641,-722,711
-369,-706,769
-784,542,884
773,-711,-597
-679,856,-616
-646,551,831
621,-613,809
-400,-825,671
-382,-495,-753
-39,-64,-14
491,556,-552
-435,-373,-752
118,125,-47
577,-786,853
928,358,549
-534,859,-676
866,455,615
-623,820,-705
835,396,584
-455,-414,-767
823,-660,-494
446,593,-765
860,-654,-629
18,49,121"""
inp2 = """--- scanner 0 ---
404,-588,-901
528,-643,409
-838,591,734
390,-675,-793
-537,-823,-458
-485,-357,347
-345,-311,381
-661,-816,-575
-876,649,763
-618,-824,-621
553,345,-567
474,580,667
-447,-329,318
-584,868,-557
544,-627,-890
564,392,-477
455,729,728
-892,524,684
-689,845,-530
423,-701,434
7,-33,-71
630,319,-379
443,580,662
-789,900,-551
459,-707,401

--- scanner 1 ---
686,422,578
605,423,415
515,917,-361
-336,658,858
95,138,22
-476,619,847
-340,-569,-846
567,-361,727
-460,603,-452
669,-402,600
729,430,532
-500,-761,534
-322,571,750
-466,-666,-811
-429,-592,574
-355,545,-477
703,-491,-529
-328,-685,520
413,935,-424
-391,539,-444
586,-435,557
-364,-763,-893
807,-499,-711
755,-354,-619
553,889,-390

--- scanner 2 ---
649,640,665
682,-795,504
-784,533,-524
-644,584,-595
-588,-843,648
-30,6,44
-674,560,763
500,723,-460
609,671,-379
-555,-800,653
-675,-892,-343
697,-426,-610
578,704,681
493,664,-388
-671,-858,530
-667,343,800
571,-461,-707
-138,-166,112
-889,563,-600
646,-828,498
640,759,510
-630,509,768
-681,-892,-333
673,-379,-804
-742,-814,-386
577,-820,562

--- scanner 3 ---
-589,542,597
605,-692,669
-500,565,-823
-660,373,557
-458,-679,-417
-488,449,543
-626,468,-788
338,-750,-386
528,-832,-391
562,-778,733
-938,-730,414
543,643,-506
-524,371,-870
407,773,750
-104,29,83
378,-903,-323
-778,-728,485
426,699,580
-438,-605,-362
-469,-447,-387
509,732,623
647,635,-688
-868,-804,481
614,-800,639
595,780,-596

--- scanner 4 ---
727,592,562
-293,-554,779
441,611,-461
-714,465,-776
-743,427,-804
-660,-479,-426
832,-632,460
927,-485,-438
408,393,-506
466,436,-512
110,16,151
-258,-428,682
-393,719,612
-211,-452,876
808,-476,-593
-575,615,604
-485,667,467
-680,325,-822
-627,-443,-432
872,-547,-609
833,512,582
807,604,487
839,-516,451
891,-625,532
-652,-548,-490
30,-46,-14"""

def parse_input(inp):
    r = inp.split('\n')
    r = [e for e in r if e != '']
    r = parse_helper(r, -1)
    r = [(i, e.split(',')) for i,e in r]
    r = [(i, tuple([int(x) for x in e])) for i,e in r]
    return [[coords for scann,coords in r if scann==i] for i in range(r[-1][0] + 1)]

def parse_helper(inp, label):
    if not inp:
        return []
    elem = inp[0]
    if 'scanner' in elem:
        num = [c for c in elem if c.isalnum() and not c.isalpha()]
        num = int(''.join(num))
        return parse_helper(inp[1:], num)
    return [(label, elem)] + parse_helper(inp[1:], label)

def get_distance(p1, p2):
    x = p2[0] - p1[0]
    y = p2[1] - p1[1]
    z = p2[2] - p1[2]
    return sqrt(x*x + y*y + z*z)

def find_distances(scanner):
    # return [(get_distance(s1, s2), s1, s2) for s1 in scanner for s2 in scanner if s1 != s2]
    return {get_distance(s1, s2): set([s1, s2]) for s1 in scanner for s2 in scanner if s1 != s2}

def set_distances(scanners):
    return [find_distances(s) for s in scanners]

def points_to_distances(scanner, distances):
    return {point: {d for d,p in distances.items() if point in p} for point in scanner}

def set_points_to_distances(scanners, distances):
    return [points_to_distances(s, d) for s,d in zip(scanners, distances)]

def point_to_point(point, point_to_distance, distances):
    possible_dists = point_to_distance[point]
    mapping = possible_dists & distances.keys()
    if not mapping:
        return None
    r = reduce(lambda acc, val: acc & val, [distances[x] for x in mapping])
    return r

def update(scanners, dists, points_distances, relative_to_zero, n, offsets):
    # print('relative zero', relative_to_zero)
    # print(len(relative_to_zero))
    if len(relative_to_zero) == n:
        return scanners, offsets
    pm = {(id1, id2): point_map(id1, id2, scanners, dists, points_distances) for id1 in range(n) for id2 in range(n) if id1!=id2}
    # lens = {(i,j): len(v) for (i,j),v in pm.items() if len(v) >= 12 and i in relative_to_zero and j not in relative_to_zero}
    lens = [((i,j), len(v)) for (i,j),v in pm.items() if i in relative_to_zero and j not in relative_to_zero]
    lens = sorted(lens, key = lambda x: x[1])
    # print(lens)
    (base, relative), v = list(lens)[-1]
    coord_map = {k:list(v)[0] for k,v in pm[(base, relative)].items()}
    transform_map = {t: [(k,apply_transform(v, t)) for k,v in coord_map.items() ] for t in ALL_TRANSFORMS}
    transform_map = { k: [ (p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]) for p1, p2 in v ] for k,v in transform_map.items() }
    transform_bool = {k: all(v[0] == x for x in v) for k,v in transform_map.items()}
    final_transform = [k for k,v in transform_bool.items() if v][0]
    transp = transform_map[final_transform][0]
    scanners[relative] = [ apply_transform(old, final_transform) for old in scanners[relative] ]
    scanners[relative] = [ (p[0] + transp[0], p[1] + transp[1], p[2] + transp[2]) for p in scanners[relative]]
    newn_distances = set_distances(scanners)
    new_points_distances = set_points_to_distances(scanners, newn_distances)
    return update(scanners, newn_distances, new_points_distances, relative_to_zero | {relative}, n, offsets + [transp])

def point_map(id1, id2, scanners, distances, points_distances):
    r = {p: point_to_point(p, points_distances[id1], distances[id2]) for p in scanners[id1]}
    r = {k:v for k,v in r.items() if v != None and len(v) == 1}
    return r

def most_common_distances(dists):
    return [(len(set(dists[x]) & set(dists[y])), x, y) for x in range(len(dists)) for y in range(len(dists)) if x!=y]

def part1(scanners):
    dists = set_distances(scanners)
    points_distances = set_points_to_distances(scanners, dists)
    beacons, offset = update(scanners, dists, points_distances, {0}, len(scanners), [(0,0,0)])
    result = reduce(lambda acc, val: acc | set(val), beacons[1:], set(beacons[0]))
    return result, offset

def part2(offsets):
    print('len offsets', len(offsets))
    print(offsets)
    manhattans = [abs(o1[0] - o2[0]) + abs(o1[1] - o2[1]) + abs(o1[2] - o2[2]) for o1 in offsets for o2 in offsets]
    print('len manhattans', len(manhattans))
    print(manhattans)
    return max(manhattans)

def apply_transform(p, transf):
    rx, ry, rz = transf
    p = reduce(lambda acc, _v: rotate_x(acc), range(rx), p) if rx != 0 else p
    p = reduce(lambda acc, _v: rotate_y(acc), range(ry), p) if ry != 0 else p
    p = reduce(lambda acc, _v: rotate_z(acc), range(rz), p) if rz != 0 else p
    return p

def rotate_z(p):
    x, y, z = p
    return (y, -x, z)

def rotate_y(p):
    x, y, z = p
    return (-z, y, x)

def rotate_x(p):
    x, y, z = p
    return (x, -z, y)

from functools import reduce
from math import sqrt

temp_p = (1, 20, 300)
temp_r = {apply_transform(temp_p, t): t for t in [(x,y,z) for x in range(4, -1, -1) for y in range(4, -1, -1) for z in range(4, -1, -1)]}
ALL_TRANSFORMS = list(temp_r.values())

all_scanners = parse_input(inp)
beacons, offsets = part1(all_scanners)
print(len(beacons))
print(part2(offsets))

# t = [1266, 2537, 2280, 1300, 3478, 2210, 3515, 1140, 4664, 3565, 1136, 2453, 3644, 1267, 1194, -124, -1349, -4, -204, -1320, -2513, 2252, 3535, 2498, 3548, 1162, -1426, -3693, 4453, 5875, 6047, -1266, 1271, 1014, 34, 2212, 944, 2249, -126, 3398, 2299, -130, 1187, 2378, 1, -72, -1390, -2615, -1270, -1470, -2586, -3779, 986, 2269, 1232, 2282, -104, -2692, -4959, 3187, 4609, 4781, -2537, -1271, -257, -1237, 941, -327, 978, -1397, 2127, 1028, -1401, -84, 1107, -1270, -1343, -2661, -3886, -2541, -2741, -3857, -5050, -285, 998, -39, 1011, -1375, -3963, -6230, 1916, 3338, 3510, -2280, -1014, 257, -980, 1198, -70, 1235, -1140, 2384, 1285, -1144, 173, 1364, -1013, -1086, -2404, -3629, -2284, -2484, -3600, -4793, -28, 1255, 218, 1268, -1118, -3706, -5973, 2173, 3595, 3767, -1300, -34, 1237, 980, 2178, 910, 2215, -160, 3364, 2265, -164, 1153, 2344, -33, -106, -1424, -2649, -1304, -1504, -2620, -3813, 952, 2235, 1198, 2248, -138, -2726, -4993, 3153, 4575, 4747, -3478, -2212, -941, -1198, -2178, -1268, 37, -2338, 1186, 87, -2342, -1025, 166, -2211, -2284, -3602, -4827, -3482, -3682, -4798, -5991, -1226, 57, -980, 70, -2316, -4904, -7171, 975, 2397, 2569, -2210, -944, 327, 70, -910, 1268, 1305, -1070, 2454, 1355, -1074, 243, 1434, -943, -1016, -2334, -3559, -2214, -2414, -3530, -4723, 42, 1325, 288, 1338, -1048, -3636, -5903, 2243, 3665, 3837, -3515, -2249, -978, -1235, -2215, -37, -1305, -2375, 1149, 50, -2379, -1062, 129, -2248, -2321, -3639, -4864, -3519, -3719, -4835, -6028, -1263, 20, -1017, 33, -2353, -4941, -7208, 938, 2360, 2532, -1140, 126, 1397, 1140, 160, 2338, 1070, 2375, 3524, 2425, -4, 1313, 2504, 127, 54, -1264, -2489, -1144, -1344, -2460, -3653, 1112, 2395, 1358, 2408, 22, -2566, -4833, 3313, 4735, 4907, -4664, -3398, -2127, -2384, -3364, -1186, -2454, -1149, -3524, -1099, -3528, -2211, -1020, -3397, -3470, -4788, -6013, -4668, -4868, -5984, -7177, -2412, -1129, -2166, -1116, -3502, -6090, -8357, -211, 1211, 1383, -3565, -2299, -1028, -1285, -2265, -87, -1355, -50, -2425, 1099, -2429, -1112, 79, -2298, -2371, -3689, -4914, -3569, -3769, -4885, -6078, -1313, -30, -1067, -17, -2403, -4991, -7258, 888, 2310, 2482, -1136, 130, 1401, 1144, 164, 2342, 1074, 2379, 4, 3528, 2429, 1317, 2508, 131, 58, -1260, -2485, -1140, -1340, -2456, -3649, 1116, 2399, 1362, 2412, 26, -2562, -4829, 3317, 4739, 4911, -2453, -1187, 84, -173, -1153, 1025, -243, 1062, -1313, 2211, 1112, -1317, 1191, -1186, -1259, -2577, -3802, -2457, -2657, -3773, -4966, -201, 1082, 45, 1095, -1291, -3879, -6146, 2000, 3422, 3594, -3644, -2378, -1107, -1364, -2344, -166, -1434, -129, -2504, 1020, -79, -2508, -1191, -2377, -2450, -3768, -4993, -3648, -3848, -4964, -6157, -1392, -109, -1146, -96, -2482, -5070, -7337, 809, 2231, 2403, -1267, -1, 1270, 1013, 33, 2211, 943, 2248, -127, 3397, 2298, -131, 1186, 2377, -73, -1391, -2616, -1271, -1471, -2587, -3780, 985, 2268, 1231, 2281, -105, -2693, -4960, 3186, 4608, 4780, -1194, 72, 1343, 1086, 106, 2284, 1016, 2321, -54, 3470, 2371, -58, 1259, 2450, 73, -1318, -2543, -1198, -1398, -2514, -3707, 1058, 2341, 1304, 2354, -32, -2620, -4887, 3259, 4681, 4853, 124, 1390, 2661, 2404, 1424, 3602, 2334, 3639, 1264, 4788, 3689, 1260, 2577, 3768, 1391, 1318, -1225, 120, -80, -1196, -2389, 2376, 3659, 2622, 3672, 1286, -1302, -3569, 4577, 5999, 6171, 1349, 2615, 3886, 3629, 2649, 4827, 3559, 4864, 2489, 6013, 4914, 2485, 3802, 4993, 2616, 2543, 1225, 1345, 1145, 29, -1164, 3601, 4884, 3847, 4897, 2511, -77, -2344, 5802, 7224, 7396, 4, 1270, 2541, 2284, 1304, 3482, 2214, 3519, 1144, 4668, 3569, 1140, 2457, 3648, 1271, 1198, -120, -1345, -200, -1316, -2509, 2256, 3539, 2502, 3552, 1166, -1422, -3689, 4457, 5879, 6051, 204, 1470, 2741, 2484, 1504, 3682, 2414, 3719, 1344, 4868, 3769, 1340, 2657, 3848, 1471, 1398, 80, -1145, 200, -1116, -2309, 2456, 3739, 2702, 3752, 1366, -1222, -3489, 4657, 6079, 6251, 1320, 2586, 3857, 3600, 2620, 4798, 3530, 4835, 2460, 5984, 4885, 2456, 3773, 4964, 2587, 2514, 1196, -29, 1316, 1116, -1193, 3572, 4855, 3818, 4868, 2482, -106, -2373, 5773, 7195, 7367, 2513, 3779, 5050, 4793, 3813, 5991, 4723, 6028, 3653, 7177, 6078, 3649, 4966, 6157, 3780, 3707, 2389, 1164, 2509, 2309, 1193, 4765, 6048, 5011, 6061, 3675, 1087, -1180, 6966, 8388, 8560, -2252, -986, 285, 28, -952, 1226, -42, 1263, -1112, 2412, 1313, -1116, 201, 1392, -985, -1058, -2376, -3601, -2256, -2456, -3572, -4765, 1283, 246, 1296, -1090, -3678, -5945, 2201, 3623, 3795, -3535, -2269, -998, -1255, -2235, -57, -1325, -20, -2395, 1129, 30, -2399, -1082, 109, -2268, -2341, -3659, -4884, -3539, -3739, -4855, -6048, -1283, -1037, 13, -2373, -4961, -7228, 918, 2340, 2512, -2498, -1232, 39, -218, -1198, 980, -288, 1017, -1358, 2166, 1067, -1362, 
# -45, 1146, -1231, -1304, -2622, -3847, -2502, -2702, -3818, -5011, -246, 1037, 1050, -1336, -3924, -6191, 1955, 3377, 3549, -3548, -2282, -1011, -1268, -2248, -70, -1338, -33, -2408, 1116, 17, -2412, -1095, 96, -2281, -2354, -3672, -4897, -3552, -3752, -4868, -6061, -1296, -13, -1050, -2386, -4974, -7241, 905, 2327, 2499, -1162, 104, 1375, 1118, 138, 2316, 1048, 2353, -22, 3502, 2403, -26, 1291, 2482, 105, 32, -1286, -2511, -1166, -1366, -2482, -3675, 1090, 2373, 1336, 2386, -2588, -4855, 3291, 4713, 4885, 1426, 2692, 3963, 3706, 2726, 4904, 3636, 4941, 2566, 6090, 4991, 2562, 3879, 5070, 2693, 2620, 1302, 77, 1422, 1222, 106, -1087, 3678, 4961, 3924, 4974, 2588, -2267, 5879, 7301, 7473, 3693, 4959, 6230, 5973, 4993, 7171, 5903, 7208, 4833, 8357, 7258, 4829, 6146, 7337, 4960, 4887, 3569, 2344, 3689, 3489, 2373, 1180, 5945, 7228, 6191, 7241, 4855, 2267, 8146, 9568, 9740, -4453, -3187, -1916, -2173, -3153, -975, -2243, -938, -3313, 211, -888, -3317, -2000, -809, -3186, -3259, -4577, -5802, -4457, -4657, -5773, -6966, -2201, -918, 
# -1955, -905, -3291, -5879, -8146, 1422, 1594, -5875, -4609, -3338, -3595, -4575, -2397, -3665, -2360, -4735, -1211, -2310, -4739, -3422, -2231, -4608, -4681, -5999, -7224, -5879, -6079, -7195, -8388, -3623, -2340, -3377, -2327, -4713, -7301, -9568, -1422, 172, 
# -6047, -4781, -3510, -3767, -4747, -2569, -3837, -2532, -4907, -1383, -2482, -4911, -3594, -2403, -4780, -4853, -6171, -7396, -6051, -6251, -7367, -8560, -3795, -2512, -3549, -2499, -4885, -7473, -9740, -1594, -172]
# t = [1221, 92, -1129, 2492, -1221, -1129, -2350, 1271, -92, 1129, -1221, 2400, 1129, 2350, 1221, 3621, -2492, -1271, -2400, -3621]
# print(max(t))
# print(len(t))